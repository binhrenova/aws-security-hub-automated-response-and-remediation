{
 "Description": "(DEV-SO0111C) AWS Security Hub Automated Response & Remediation CIS 1.4.0 Compliance Pack - Member Account, v1.5.1",
 "AWSTemplateFormatVersion": "2010-09-09",
 "Parameters": {
  "SecHubAdminAccount": {
   "Type": "String",
   "AllowedPattern": "^\\d{12}$",
   "Description": "Admin account number"
  },
  "WaitProviderServiceToken": {
   "Type": "String"
  },
  "ControlRunbooksEnable181C318FC3": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 1.8 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable112D0A85A4C": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 1.12 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable11420700A06": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 1.14 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable1176CD5F1DF": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 1.17 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable2114BB0FE33": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 2.1.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable212AC2A9740": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 2.1.2 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable2151F6938FCB": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 2.1.5.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable215295B0C61F": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 2.1.5.2 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable221A45AA374": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 2.2.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable31414C52D4": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 3.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable3263E6D183": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 3.2 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable3345664E05": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 3.3 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable34E4CE22B2": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 3.4 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable35E545303E": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 3.5 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable365DE45372": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 3.6 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable37C20680E9": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 3.7 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable38CFC29150": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 3.8 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable39896E35D8": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 3.9 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable41660E9092": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 4.1 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  },
  "ControlRunbooksEnable53E6CB545D": {
   "Type": "String",
   "Default": "Available",
   "AllowedValues": [
    "Available",
    "NOT Available"
   ],
   "Description": "Enable/disable availability of remediation for cis-aws-foundations-benchmark version 1.4.0 Control 5.3 in Security Hub Console Custom Actions. If NOT Available the remediation cannot be triggered from the Security Hub console in the Security Hub Admin account."
  }
 },
 "Resources": {
  "ControlRunbooks18982107CE": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_IAM.7\n\n## What does this document do?\nThis document establishes a default password policy.\n\n## Security Standards and Controls\n* AFSBP IAM.7\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n## Output Parameters\n* Remediation.Output\n\n## Documentation Links\n* [AFSBP IAM.7](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-iam-7)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 1.8 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-SetIAMPasswordPolicy",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "",
         "expected_control_id": [
          "1.8",
          "1.9"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-SetIAMPasswordPolicy",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "AllowUsersToChangePassword": true,
         "HardExpiry": true,
         "MaxPasswordAge": 90,
         "MinimumPasswordLength": 14,
         "RequireSymbols": true,
         "RequireNumbers": true,
         "RequireUppercaseCharacters": true,
         "RequireLowercaseCharacters": true,
         "PasswordReusePrevention": 24
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Established a baseline password policy using the ASR-SetIAMPasswordPolicy runbook.",
         "UpdatedBy": "ASR-CIS_1.4.0_1.8"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_1.8",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait0"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/1.8/Resource"
   },
   "Condition": "ControlRunbooksEnable18ConditionF6303E01"
  },
  "ControlRunbooks112E799FE52": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_IAM.8\n\n## What does this document do?\nThis document ensures that credentials unused for 90 days or greater are disabled.\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output - Output of remediation runbook\n\nSEE AWSConfigRemediation-RevokeUnusedIAMUserCredentials\n\n## Documentation Links\n* [AFSBP IAM.8](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-iam-8)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 1.12 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-RevokeUnusedIAMUserCredentials",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "",
         "expected_control_id": [
          "1.12"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "IAMResourceId",
         "Selector": "$.Payload.details.AwsIamUser.UserId",
         "Type": "String"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-RevokeUnusedIAMUserCredentials",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "IAMResourceId": "{{ ParseInput.IAMResourceId }}",
         "MaxCredentialUsageAge": "45"
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Deactivated unused keys and expired logins using the ASR-RevokeUnusedIAMUserCredentials runbook.",
         "UpdatedBy": "ASR-CIS_1.4.0_1.12"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_1.12",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait0"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/1.12/Resource"
   },
   "Condition": "ControlRunbooksEnable112ConditionBA5990A5"
  },
  "ControlRunbooks11463D81FF3": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_IAM.3\n\n## What does this document do?\nThis document disables active keys that have not been rotated for more than 90 days. Note that this remediation is **DISRUPTIVE**.\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output\n\n## Documentation Links\n* [AFSBP v1.0.0 IAM.3](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-iam-3)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "MaxCredentialUsageAge": {
       "type": "String",
       "description": "(Required) Maximum number of days a key can be unrotated. The default value is 90 days.",
       "default": "90",
       "allowedPattern": "^(?:[1-9]\\d{0,3}|10000)$"
      },
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 1.14 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-RevokeUnrotatedKeys",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):iam::\\d{12}:user(?:(?:\\u002F)|(?:\\u002F[\\u0021-\\u007F]{1,510}\\u002F))([\\w+=,.@-]{1,64})$",
         "expected_control_id": [
          "1.14"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "IAMUser",
         "Selector": "$.Payload.resource_id",
         "Type": "String"
        },
        {
         "Name": "IAMResourceId",
         "Selector": "$.Payload.details.AwsIamUser.UserId",
         "Type": "String"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-RevokeUnrotatedKeys",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "IAMResourceId": "{{ ParseInput.IAMResourceId }}",
         "MaxCredentialUsageAge": "{{ MaxCredentialUsageAge }}"
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Deactivated unrotated keys for {{ ParseInput.IAMUser }}.",
         "UpdatedBy": "ASR-CIS_1.4.0_1.14"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_1.14",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait0"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/1.14/Resource"
   },
   "Condition": "ControlRunbooksEnable114Condition7F10591B"
  },
  "ControlRunbooks117A6C528D4": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-CIS_1.2.0_1.20\n\n## What does this document do?\nCreates a support role to allow AWS Support access.\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output - Output of CreateRole API.\n\n## Documentation Links\n* [CIS v1.2.0 1.20](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-1.20)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 1.17 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-CreateIAMSupportRole",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "",
         "expected_control_id": [
          "1.17"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-CreateIAMSupportRole",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}"
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Create an IAM role to allow authorized users to manage incidents with AWS Support using the ASR-CreateIAMSupportRole runbook.",
         "UpdatedBy": "ASR-CIS_1.4.0_1.17"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_1.17",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait0"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/1.17/Resource"
   },
   "Condition": "ControlRunbooksEnable117Condition9084BE5D"
  },
  "ControlRunbooks211791EFE09": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_S3.4\n\n## What does this document do?\nThis document enables AES-256 as the default encryption for an S3 bucket.\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output\n\n## Documentation Links\n* [AFSBP v1.0.0 S3.4](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-4)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "KmsKeyAlias": {
       "type": "String",
       "description": "(Required) KMS Customer-Managed Key (CMK) alias or the default value which is created in the SSM parameter at solution deployment (default-s3-encryption) is used to identify that the s3 bucket encryption value should be set to AES-256.",
       "default": "{{ssm:/Solutions/SO0111/afsbp/1.0.0/S3.4/KmsKeyAlias}}",
       "allowedPattern": "^$|^[a-zA-Z0-9/_-]{1,256}$"
      },
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 2.1.1 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-EnableDefaultEncryptionS3",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):s3:::([A-Za-z0-9.-]{3,63})$",
         "expected_control_id": [
          "2.1.1"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "BucketName",
         "Selector": "$.Payload.resource_id",
         "Type": "String"
        },
        {
         "Name": "RemediationAccount",
         "Selector": "$.Payload.account_id",
         "Type": "String"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-EnableDefaultEncryptionS3",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "BucketName": "{{ ParseInput.BucketName }}",
         "AccountId": "{{ ParseInput.RemediationAccount }}",
         "KmsKeyAlias": "{{ KmsKeyAlias }}"
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Enabled default encryption for {{ ParseInput.BucketName }}",
         "UpdatedBy": "ASR-CIS_1.4.0_2.1.1"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_2.1.1",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait0"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/2.1.1/Resource"
   },
   "Condition": "ControlRunbooksEnable211ConditionB51DDAA2"
  },
  "ControlRunbooks21282C7C72B": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_S3.5\n\n## What does this document do?\nThis document adds a bucket policy to restrict internet access to https only.\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output\n\n## Documentation Links\n* [AFSBP v1.0.0 S3.5](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-5)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 2.1.2 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-SetSSLBucketPolicy",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):s3:::([A-Za-z0-9.-]{3,63})$",
         "expected_control_id": [
          "2.1.2"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "BucketName",
         "Selector": "$.Payload.resource_id",
         "Type": "String"
        },
        {
         "Name": "RemediationAccount",
         "Selector": "$.Payload.account_id",
         "Type": "String"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-SetSSLBucketPolicy",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "BucketName": "{{ ParseInput.BucketName }}",
         "AccountId": "{{ ParseInput.RemediationAccount }}"
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Added SSL-only access policy to S3 bucket.",
         "UpdatedBy": "ASR-CIS_1.4.0_2.1.2"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_2.1.2",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait1"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/2.1.2/Resource"
   },
   "Condition": "ControlRunbooksEnable212ConditionE41EF736"
  },
  "ControlRunbooks2151BEA4F4FA": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_S3.1\n\n## What does this document do?\nThis document blocks public access to all buckets by default at the account level.\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output\n\n## Documentation Links\n* [AFSBP v1.0.0 S3.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-1)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 2.1.5.1 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-ConfigureS3PublicAccessBlock",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "",
         "expected_control_id": [
          "2.1.5.1"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "RemediationAccount",
         "Selector": "$.Payload.account_id",
         "Type": "String"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-ConfigureS3PublicAccessBlock",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "AccountId": "{{ ParseInput.RemediationAccount }}",
         "RestrictPublicBuckets": true,
         "BlockPublicAcls": true,
         "IgnorePublicAcls": true,
         "BlockPublicPolicy": true
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Configured the account to block public S3 access.",
         "UpdatedBy": "ASR-CIS_1.4.0_2.1.5.1"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_2.1.5.1",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait1"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/2.1.5.1/Resource"
   },
   "Condition": "ControlRunbooksEnable2151ConditionF22F5254"
  },
  "ControlRunbooks21527B562EDD": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_S3.2\n\n## What does this document do?\nThis document blocks all public access to an S3 bucket.\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output\n\n## Documentation Links\n* [AFSBP v1.0.0 S3.2](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-2)\n* [AFSBP v1.0.0 S3.3](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-3)\n* [AFSBP v1.0.0 S3.8](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-8)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 2.1.5.2 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-ConfigureS3BucketPublicAccessBlock",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):s3:::([A-Za-z0-9.-]{3,63})$",
         "expected_control_id": [
          "2.1.5.2"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "BucketName",
         "Selector": "$.Payload.resource_id",
         "Type": "String"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-ConfigureS3BucketPublicAccessBlock",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "BucketName": "{{ ParseInput.BucketName }}",
         "RestrictPublicBuckets": true,
         "BlockPublicAcls": true,
         "IgnorePublicAcls": true,
         "BlockPublicPolicy": true
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Disabled public access to S3 bucket.",
         "UpdatedBy": "ASR-CIS_1.4.0_2.1.5.2"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_2.1.5.2",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait1"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/2.1.5.2/Resource"
   },
   "Condition": "ControlRunbooksEnable2152Condition0CC57650"
  },
  "ControlRunbooks221536A739E": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_EC2.7\n## What does this document do?\nThis document enables `EBS Encryption by default` for an AWS account in the current region by calling another SSM document\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n## Output Parameters\n* Remediation.Output\n\n## Documentation Links\n* [AFSBP EC2.7](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-ec2-7)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 2.2.1 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-EnableEbsEncryptionByDefault",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "",
         "expected_control_id": [
          "2.2.1"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-EnableEbsEncryptionByDefault",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}"
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Enabled EBS encryption by default",
         "UpdatedBy": "ASR-CIS_1.4.0_2.2.1"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_2.2.1",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait1"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/2.2.1/Resource"
   },
   "Condition": "ControlRunbooksEnable221Condition321911A4"
  },
  "ControlRunbooks31E1EB4148": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_CloudTrail.1\n## What does this document do?\nCreates a multi-region trail with KMS encryption and enables CloudTrail\nNote: this remediation will create a NEW trail.\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Documentation Links\n* [AFSBP CloudTrail.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-cloudtrail-1)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 3.1 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-CreateCloudTrailMultiRegionTrail",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "",
         "expected_control_id": [
          "3.1"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-CreateCloudTrailMultiRegionTrail",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "AWSPartition": "{{ global:AWS_PARTITION }}"
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Multi-region, encrypted AWS CloudTrail successfully created",
         "UpdatedBy": "ASR-CIS_1.4.0_3.1"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_3.1",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait1"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/3.1/Resource"
   },
   "Condition": "ControlRunbooksEnable31ConditionCE8DA4BE"
  },
  "ControlRunbooks327C23FA17": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_CloudTrail.4\n\n## What does this document do?\nThis document enables CloudTrail log file validation.\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output\n\n## Documentation Links\n* [AFSBP v1.0.0 CloudTrail.4](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-cloudtrail-4)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 3.2 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-EnableCloudTrailLogFileValidation",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):cloudtrail:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:trail\\/([A-Za-z0-9._-]{3,128})$",
         "expected_control_id": [
          "3.2"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "TrailName",
         "Selector": "$.Payload.resource_id",
         "Type": "String"
        },
        {
         "Name": "RemediationAccount",
         "Selector": "$.Payload.account_id",
         "Type": "String"
        },
        {
         "Name": "RemediationRegion",
         "Selector": "$.Payload.resource_region",
         "Type": "String"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-EnableCloudTrailLogFileValidation",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "TrailName": "{{ ParseInput.TrailName }}"
        },
        "TargetLocations": [
         {
          "Accounts": [
           "{{ ParseInput.RemediationAccount }}"
          ],
          "Regions": [
           "{{ ParseInput.RemediationRegion }}"
          ],
          "ExecutionRoleName": "{{ RemediationRoleName }}"
         }
        ]
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Enabled CloudTrail log file validation.",
         "UpdatedBy": "ASR-CIS_1.4.0_3.2"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_3.2",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait2"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/3.2/Resource"
   },
   "Condition": "ControlRunbooksEnable32Condition07D68F4A"
  },
  "ControlRunbooks3344D51B18": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-CIS_1.2.0_2.3\n\n## What does this document do?\nThis document blocks public access to the CloudTrail S3 bucket.\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output\n\n## Documentation Links\n* [CIS v1.2.0 2.3](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-2.3)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 3.3 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-ConfigureS3BucketPublicAccessBlock",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):s3:::([A-Za-z0-9.-]{3,63})$",
         "expected_control_id": [
          "3.3"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "BucketName",
         "Selector": "$.Payload.resource_id",
         "Type": "String"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-ConfigureS3BucketPublicAccessBlock",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "BucketName": "{{ ParseInput.BucketName }}",
         "RestrictPublicBuckets": true,
         "BlockPublicAcls": true,
         "IgnorePublicAcls": true,
         "BlockPublicPolicy": true
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Disabled public access to CloudTrail logs bucket.",
         "UpdatedBy": "ASR-CIS_1.4.0_3.3"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_3.3",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait2"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/3.3/Resource"
   },
   "Condition": "ControlRunbooksEnable33Condition00E8BEE4"
  },
  "ControlRunbooks34EAC45CB8": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_CloudTrail.5\n\n## What does this document do?\nThis document configures CloudTrail to log to CloudWatch Logs.\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output - Remediation results\n\n## Documentation Links\n* [AFSBP v1.0.0 CloudTrail.5](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-cloudtrail-5)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 3.4 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-EnableCloudTrailToCloudWatchLogging",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):cloudtrail:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:trail\\/([A-Za-z0-9._-]{3,128})$",
         "expected_control_id": [
          "3.4"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "TrailName",
         "Selector": "$.Payload.resource_id",
         "Type": "String"
        },
        {
         "Name": "RemediationAccount",
         "Selector": "$.Payload.account_id",
         "Type": "String"
        },
        {
         "Name": "RemediationRegion",
         "Selector": "$.Payload.resource_region",
         "Type": "String"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-EnableCloudTrailToCloudWatchLogging",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "TrailName": "{{ ParseInput.TrailName }}",
         "CloudWatchLogsRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/DEV-SO0111-CloudTrailToCloudWatchLogs",
         "LogGroupName": "CloudTrail/{{ ParseInput.TrailName }}"
        },
        "TargetLocations": [
         {
          "Accounts": [
           "{{ ParseInput.RemediationAccount }}"
          ],
          "Regions": [
           "{{ ParseInput.RemediationRegion }}"
          ],
          "ExecutionRoleName": "{{ RemediationRoleName }}"
         }
        ]
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Configured CloudTrail logging to CloudWatch Logs Group CloudTrail/{{ ParseInput.TrailName }}",
         "UpdatedBy": "ASR-CIS_1.4.0_3.4"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_3.4",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait2"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/3.4/Resource"
   },
   "Condition": "ControlRunbooksEnable34Condition951268F5"
  },
  "ControlRunbooks35A7FCA9DB": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_Config.1\n## What does this document do?\nEnables AWS Config:\n* Turns on recording for all resources.\n* Creates an encrypted bucket for Config logging.\n* Creates a logging bucket for access logs for the config bucket\n* Creates an SNS topic for Config notifications\n* Creates a service-linked role\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Documentation Links\n* [AFSBP Config.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-config-1)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "KMSKeyArn": {
       "type": "String",
       "description": "The ARN of the KMS key created by ASR for remediations",
       "default": "{{ssm:/Solutions/DEV-SO0111/CMK_REMEDIATION_ARN}}",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):kms:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:(?:(?:alias\\/[A-Za-z0-9/-_])|(?:key\\/(?:[0-9a-fA-F]{8}-(?:[0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})))$"
      },
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 3.5 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-EnableAWSConfig",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "",
         "expected_control_id": [
          "3.5"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-EnableAWSConfig",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "SNSTopicName": "DEV-SO0111-SHARR-AWSConfigNotification",
         "KMSKeyArn": "{{ KMSKeyArn }}"
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "AWS Config enabled",
         "UpdatedBy": "ASR-CIS_1.4.0_3.5"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_3.5",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait2"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/3.5/Resource"
   },
   "Condition": "ControlRunbooksEnable35ConditionE60C238E"
  },
  "ControlRunbooks36E5400050": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-CIS_1.2.0_2.6\n\n## What does this document do?\nConfigures access logging for a CloudTrail S3 bucket.\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output - Remediation results\n\n## Documentation Links\n* [CIS v1.2.0 2.6](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-2.6)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 3.6 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-ConfigureS3BucketLogging",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):s3:::([A-Za-z0-9.-]{3,63})$",
         "expected_control_id": [
          "3.6"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "BucketName",
         "Selector": "$.Payload.resource_id",
         "Type": "String"
        }
       ]
      },
      {
       "name": "CreateAccessLoggingBucket",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-CreateAccessLoggingBucket",
        "RuntimeParameters": {
         "BucketName": "dev-so0111-cloudtrailaccesslogs-{{ global:ACCOUNT_ID }}-{{ global:REGION }}",
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/DEV-SO0111-CreateAccessLoggingBucket"
        }
       }
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "AWS-ConfigureS3BucketLogging",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "BucketName": "{{ ParseInput.BucketName }}",
         "GrantedPermission": [
          "READ"
         ],
         "GranteeType": [
          "Group"
         ],
         "GranteeUri": [
          "http://acs.amazonaws.com/groups/s3/LogDelivery"
         ],
         "TargetPrefix": [
          "{{ ParseInput.BucketName }}"
         ],
         "TargetBucket": [
          "dev-so0111-cloudtrailaccesslogs-{{ global:ACCOUNT_ID }}-{{ global:REGION }}"
         ]
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Created S3 bucket dev-so0111-cloudtrailaccesslogs-{{ global:ACCOUNT_ID }}-{{ global:REGION }} for logging access to {{ ParseInput.BucketName }}",
         "UpdatedBy": "ASR-CIS_1.4.0_3.6"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_3.6",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait2"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/3.6/Resource"
   },
   "Condition": "ControlRunbooksEnable36Condition6354E2A2"
  },
  "ControlRunbooks37445C7EAF": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_CloudTrail.2\n## What does this document do?\nThis document enables SSE KMS encryption for log files using the ASR remediation KMS CMK\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n## Output Parameters\n* Remediation.Output - Output from the remediation\n\n## Documentation Links\n* [AFSBP CloudTrail.2](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-cloudtrail-2)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "KMSKeyArn": {
       "type": "String",
       "default": "{{ssm:/Solutions/SO0111/CMK_REMEDIATION_ARN}}",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):kms:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:(?:(?:alias\\/[A-Za-z0-9/_-])|(?:key\\/(?:[0-9a-fA-F]{8}-(?:[0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})))$"
      },
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 3.7 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-EnableCloudTrailEncryption",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "",
         "expected_control_id": [
          "3.7"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "TrailArn",
         "Selector": "$.Payload.resource_id",
         "Type": "String"
        },
        {
         "Name": "RemediationRegion",
         "Selector": "$.Payload.resource_region",
         "Type": "String"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-EnableCloudTrailEncryption",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "TrailArn": "{{ ParseInput.TrailArn }}",
         "TrailRegion": "{{ ParseInput.RemediationRegion }}",
         "KMSKeyArn": "{{ KMSKeyArn }}"
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Encryption enabled on CloudTrail",
         "UpdatedBy": "ASR-CIS_1.4.0_3.7"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_3.7",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait3"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/3.7/Resource"
   },
   "Condition": "ControlRunbooksEnable37ConditionD24493F4"
  },
  "ControlRunbooks38380D9165": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-CIS_1.2.0_2.8\n\n## What does this document do?\nEnables rotation for customer-managed KMS keys.\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output - Remediation results\n\n## Documentation Links\n* [CIS v1.2.0 2.8](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-2.8)\n* [PCI v3.2.1 PCI.KMS.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html#pcidss-kms-1)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 3.8 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-EnableKeyRotation",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):kms:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:key\\/([A-Za-z0-9-]{36})$",
         "expected_control_id": [
          "3.8"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "KeyId",
         "Selector": "$.Payload.resource_id",
         "Type": "String"
        },
        {
         "Name": "RemediationAccount",
         "Selector": "$.Payload.account_id",
         "Type": "String"
        },
        {
         "Name": "RemediationRegion",
         "Selector": "$.Payload.resource_region",
         "Type": "String"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-EnableKeyRotation",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "KeyId": "{{ ParseInput.KeyId }}"
        },
        "TargetLocations": [
         {
          "Accounts": [
           "{{ ParseInput.RemediationAccount }}"
          ],
          "Regions": [
           "{{ ParseInput.RemediationRegion }}"
          ],
          "ExecutionRoleName": "{{ RemediationRoleName }}"
         }
        ]
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Enabled KMS Customer Managed Key rotation for {{ ParseInput.KeyId }}",
         "UpdatedBy": "ASR-CIS_1.4.0_3.8"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_3.8",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait3"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/3.8/Resource"
   },
   "Condition": "ControlRunbooksEnable38Condition9332FA29"
  },
  "ControlRunbooks39580F3C91": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_EC2.6\n\n## What does this document do?\nEnables VPC Flow Logs for a VPC\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output - Remediation results\n\n## Documentation Links\n* [AFSBP EC2.6](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-ec2-6)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 3.9 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-EnableVPCFlowLogs",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):ec2:.*:\\d{12}:vpc\\/(vpc-[0-9a-f]{8,17})$",
         "expected_control_id": [
          "3.9"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "VPC",
         "Selector": "$.Payload.resource_id",
         "Type": "String"
        },
        {
         "Name": "RemediationAccount",
         "Selector": "$.Payload.account_id",
         "Type": "String"
        },
        {
         "Name": "RemediationRegion",
         "Selector": "$.Payload.resource_region",
         "Type": "String"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-EnableVPCFlowLogs",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "VPC": "{{ ParseInput.VPC }}",
         "RemediationRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/DEV-SO0111-EnableVPCFlowLogs-remediationRole"
        },
        "TargetLocations": [
         {
          "Accounts": [
           "{{ ParseInput.RemediationAccount }}"
          ],
          "Regions": [
           "{{ ParseInput.RemediationRegion }}"
          ],
          "ExecutionRoleName": "{{ RemediationRoleName }}"
         }
        ]
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Removed rules on default security group",
         "UpdatedBy": "ASR-CIS_1.4.0_3.9"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_3.9",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait3"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/3.9/Resource"
   },
   "Condition": "ControlRunbooksEnable39ConditionA07D23FA"
  },
  "ControlRunbooks41F5F0CF7C": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-CIS_1.2.0_3.x\n\n## What does this document do?\nRemediates the following CIS findings:\n\n3.1 - Creates a log metric filter and alarm for unauthorized API calls\n3.2 - Creates a log metric filter and alarm for AWS Management Console sign-in without MFA\n3.3 - Creates a log metric filter and alarm for usage of \"root\" account\n3.4 - Creates a log metric filter and alarm for for IAM policy changes\n3.5 - Creates a log metric filter and alarm for CloudTrail configuration changes\n3.6 - Creates a log metric filter and alarm for AWS Management Console authentication failures\n3.7 - Creates a log metric filter and alarm for disabling or scheduled deletion of customer created CMKs\n3.8 - Creates a log metric filter and alarm for S3 bucket policy changes\n3.9 - Creates a log metric filter and alarm for AWS Config configuration changes\n3.10 - Creates a log metric filter and alarm for security group changes\n3.11 - Creates a log metric filter and alarm for changes to Network Access Control Lists (NACL)\n3.12 - Creates a log metric filter and alarm for changes to network gateways\n3.13 - Creates a log metric filter and alarm for route table changes\n3.14 - Creates a log metric filter and alarm for VPC changes\n\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output - Output of remediation runbook.\n\n## Documentation Links\n[CIS v1.2.0 3.1](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.1)\n[CIS v1.2.0 3.2](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.2)\n[CIS v1.2.0 3.3](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.3)\n[CIS v1.2.0 3.4](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.4)\n[CIS v1.2.0 3.5](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.5)\n[CIS v1.2.0 3.6](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.6)\n[CIS v1.2.0 3.7](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.7)\n[CIS v1.2.0 3.8](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.8)\n[CIS v1.2.0 3.9](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.9)\n[CIS v1.2.0 3.10](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.10)\n[CIS v1.2.0 3.11](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.11)\n[CIS v1.2.0 3.12](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.12)\n[CIS v1.2.0 3.13](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.13)\n[CIS v1.2.0 3.14](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-cis-controls.html#securityhub-cis-controls-3.14)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "LogGroupName": {
       "type": "String",
       "description": "The name of the Log group to be used to create filters and metric alarms",
       "default": "{{ssm:/Solutions/DEV-SO0111/Metrics_LogGroupName}}",
       "allowedPattern": ".*"
      },
      "MetricNamespace": {
       "type": "String",
       "description": "The name of the metric namespace where the metrics will be logged",
       "default": "LogMetrics",
       "allowedPattern": ".*"
      },
      "KMSKeyArn": {
       "type": "String",
       "description": "The ARN of the KMS key created by ASR for remediations",
       "default": "{{ssm:/Solutions/DEV-SO0111/CMK_REMEDIATION_ARN}}",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):kms:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:(?:(?:alias\\/[A-Za-z0-9/-_])|(?:key\\/(?:[0-9a-fA-F]{8}-(?:[0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})))$"
      },
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 4.1 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-CreateLogMetricFilterAndAlarm",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "",
         "expected_control_id": [
          "4.1",
          "4.2",
          "4.3",
          "4.4",
          "4.5",
          "4.6",
          "4.7",
          "4.8",
          "4.9",
          "4.10",
          "4.11",
          "4.12",
          "4.13",
          "4.14"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "ControlId",
         "Selector": "$.Payload.control_id",
         "Type": "String"
        }
       ]
      },
      {
       "name": "GetMetricFilterAndAlarmInputValue",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "verify",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\nunauthorizedAPICallsFilter = {\n        \"filter_name\": \"UnauthorizedAPICalls\",\n        \"filter_pattern\": '{($.errorCode=\"*UnauthorizedOperation\") || ($.errorCode=\"AccessDenied*\")}',\n        \"metric_name\": \"UnauthorizedAPICalls\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"UnauthorizedAPICalls\",\n        \"alarm_desc\": \"Alarm for UnauthorizedAPICalls > 0\",\n        \"alarm_threshold\": 1\n}\n\nconsoleSignInWithoutMFAFilter = {\n        \"filter_name\": \"ConsoleSigninWithoutMFA\",\n        \"filter_pattern\": '{($.eventName=\"ConsoleLogin\") && ($.additionalEventData.MFAUsed !=\"Yes\")}',\n        \"metric_name\": \"ConsoleSigninWithoutMFA\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"ConsoleSigninWithoutMFA\",\n        \"alarm_desc\": \"Alarm for ConsoleSigninWithoutMFA > 0\",\n        \"alarm_threshold\": 1\n }\n\nrootAccountUsageFilter = {\n        \"filter_name\": \"RootAccountUsage\",\n        \"filter_pattern\": '{$.userIdentity.type=\"Root\" && $.userIdentity.invokedBy NOT EXISTS && $.eventType !=\"AwsServiceEvent\"}',\n        \"metric_name\": \"RootAccountUsage\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"RootAccountUsage\",\n        \"alarm_desc\": \"Alarm for RootAccountUsage > 0\",\n        \"alarm_threshold\": 1\n}\n\niamPolicyChangesFilter = {\n        \"filter_name\": \"IAMPolicyChanges\",\n        \"filter_pattern\": '{($.eventName=DeleteGroupPolicy) || ($.eventName=DeleteRolePolicy) || ($.eventName=DeleteUserPolicy) || ($.eventName=PutGroupPolicy) || ($.eventName=PutRolePolicy) || ($.eventName=PutUserPolicy) || ($.eventName=CreatePolicy) || ($.eventName=DeletePolicy) || ($.eventName=CreatePolicyVersion) || ($.eventName=DeletePolicyVersion) || ($.eventName=AttachRolePolicy) || ($.eventName=DetachRolePolicy) || ($.eventName=AttachUserPolicy) || ($.eventName=DetachUserPolicy) || ($.eventName=AttachGroupPolicy) || ($.eventName=DetachGroupPolicy)}',\n        \"metric_name\": \"IAMPolicyChanges\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"IAMPolicyChanges\",\n        \"alarm_desc\": \"Alarm for IAMPolicyChanges > 0\",\n        \"alarm_threshold\": 1\n }\n\ncloudtrailChangesFilter = {\n        \"filter_name\": \"CloudTrailChanges\",\n        \"filter_pattern\": '{($.eventName=CreateTrail) || ($.eventName=UpdateTrail) || ($.eventName=DeleteTrail) || ($.eventName=StartLogging) || ($.eventName=StopLogging)}',\n        \"metric_name\": \"CloudTrailChanges\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"CloudTrailChanges\",\n        \"alarm_desc\": \"Alarm for CloudTrailChanges > 0\",\n        \"alarm_threshold\": 1\n}\n\nconsoleAuthenticationFailureFilter = {\n        \"filter_name\": \"ConsoleAuthenticationFailure\",\n        \"filter_pattern\": '{($.eventName=ConsoleLogin) && ($.errorMessage=\"Failed authentication\")}',\n        \"metric_name\": \"ConsoleAuthenticationFailure\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"ConsoleAuthenticationFailure\",\n        \"alarm_desc\": \"Alarm for ConsoleAuthenticationFailure > 0\",\n        \"alarm_threshold\": 1\n }\n\ndisableOrDeleteCMKFilter = {\n        \"filter_name\": \"DisableOrDeleteCMK\",\n        \"filter_pattern\": '{($.eventSource=kms.amazonaws.com) && (($.eventName=DisableKey) || ($.eventName=ScheduleKeyDeletion))}',\n        \"metric_name\": \"DisableOrDeleteCMK\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"DisableOrDeleteCMK\",\n        \"alarm_desc\": \"Alarm for DisableOrDeleteCMK > 0\",\n        \"alarm_threshold\": 1\n}\n\ns3BucketPolicyChangesFilter = {\n        \"filter_name\": \"S3BucketPolicyChanges\",\n        \"filter_pattern\": '{($.eventSource=s3.amazonaws.com) && (($.eventName=PutBucketAcl) || ($.eventName=PutBucketPolicy) || ($.eventName=PutBucketCors) || ($.eventName=PutBucketLifecycle) || ($.eventName=PutBucketReplication) || ($.eventName=DeleteBucketPolicy) || ($.eventName=DeleteBucketCors) || ($.eventName=DeleteBucketLifecycle) || ($.eventName=DeleteBucketReplication))}',\n        \"metric_name\": \"S3BucketPolicyChanges\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"S3BucketPolicyChanges\",\n        \"alarm_desc\": \"Alarm for S3BucketPolicyChanges > 0\",\n        \"alarm_threshold\": 1\n}\n\nawsConfigChangesFilter = {\n        \"filter_name\": \"AWSConfigChanges\",\n        \"filter_pattern\": '{($.eventSource=config.amazonaws.com) && (($.eventName=StopConfigurationRecorder) || ($.eventName=DeleteDeliveryChannel) || ($.eventName=PutDeliveryChannel) || ($.eventName=PutConfigurationRecorder))}',\n        \"metric_name\": \"AWSConfigChanges\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"AWSConfigChanges\",\n        \"alarm_desc\": \"Alarm for AWSConfigChanges > 0\",\n        \"alarm_threshold\": 1\n}\n\nsecurityGroupChangesFilter = {\n        \"filter_name\": \"SecurityGroupChanges\",\n        \"filter_pattern\": '{($.eventName=AuthorizeSecurityGroupIngress) || ($.eventName=AuthorizeSecurityGroupEgress) || ($.eventName=RevokeSecurityGroupIngress) || ($.eventName=RevokeSecurityGroupEgress) || ($.eventName=CreateSecurityGroup) || ($.eventName=DeleteSecurityGroup)}',\n        \"metric_name\": \"SecurityGroupChanges\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"SecurityGroupChanges\",\n        \"alarm_desc\": \"Alarm for SecurityGroupChanges > 0\",\n        \"alarm_threshold\": 1\n}\n\nnetworkACLChangesFilter = {\n        \"filter_name\": \"NetworkACLChanges\",\n        \"filter_pattern\": '{($.eventName=CreateNetworkAcl) || ($.eventName=CreateNetworkAclEntry) || ($.eventName=DeleteNetworkAcl) || ($.eventName=DeleteNetworkAclEntry) || ($.eventName=ReplaceNetworkAclEntry) || ($.eventName=ReplaceNetworkAclAssociation)}',\n        \"metric_name\": \"NetworkACLChanges\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"NetworkACLChanges\",\n        \"alarm_desc\": \"Alarm for NetworkACLChanges > 0\",\n        \"alarm_threshold\": 1\n}\n\nnetworkGatewayChangesFilter = {\n        \"filter_name\": \"NetworkGatewayChanges\",\n        \"filter_pattern\": '{($.eventName=CreateCustomerGateway) || ($.eventName=DeleteCustomerGateway) || ($.eventName=AttachInternetGateway) || ($.eventName=CreateInternetGateway) || ($.eventName=DeleteInternetGateway) || ($.eventName=DetachInternetGateway)}',\n        \"metric_name\": \"NetworkGatewayChanges\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"NetworkGatewayChanges\",\n        \"alarm_desc\": \"Alarm for NetworkGatewayChanges > 0\",\n        \"alarm_threshold\": 1\n}\n\nrouteTableChangesFilter = {\n        \"filter_name\": \"RouteTableChanges\",\n        \"filter_pattern\": '{($.eventName=CreateRoute) || ($.eventName=CreateRouteTable) || ($.eventName=ReplaceRoute) || ($.eventName=ReplaceRouteTableAssociation) || ($.eventName=DeleteRouteTable) || ($.eventName=DeleteRoute) || ($.eventName=DisassociateRouteTable)}',\n        \"metric_name\": \"RouteTableChanges\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"RouteTableChanges\",\n        \"alarm_desc\": \"Alarm for RouteTableChanges > 0\",\n        \"alarm_threshold\": 1\n}\n\nvpcChangesFilter = {\n        \"filter_name\": \"VPCChanges\",\n        \"filter_pattern\": '{($.eventName=CreateVpc) || ($.eventName=DeleteVpc) || ($.eventName=ModifyVpcAttribute) || ($.eventName=AcceptVpcPeeringConnection) || ($.eventName=CreateVpcPeeringConnection) || ($.eventName=DeleteVpcPeeringConnection) || ($.eventName=RejectVpcPeeringConnection) || ($.eventName=AttachClassicLinkVpc) || ($.eventName=DetachClassicLinkVpc) || ($.eventName=DisableVpcClassicLink) || ($.eventName=EnableVpcClassicLink)}',\n        \"metric_name\": \"VPCChanges\",\n        \"metric_value\": 1,\n        \"alarm_name\": \"VPCChanges\",\n        \"alarm_desc\": \"Alarm for VPCChanges > 0\",\n        \"alarm_threshold\": 1\n}\n\nCloudwatch_mappings = {\n    'cis-aws-foundations-benchmark': {\n        '1.2.0': {\n            '3.1': unauthorizedAPICallsFilter,\n            '3.2': consoleSignInWithoutMFAFilter,\n            '3.3': rootAccountUsageFilter,\n            '3.4': iamPolicyChangesFilter,\n            '3.5': cloudtrailChangesFilter,\n            '3.6': consoleAuthenticationFailureFilter,\n            '3.7': disableOrDeleteCMKFilter,\n            '3.8': s3BucketPolicyChangesFilter,\n            '3.9': awsConfigChangesFilter,\n            '3.10': securityGroupChangesFilter,\n            '3.11': networkACLChangesFilter,\n            '3.12': networkGatewayChangesFilter,\n            '3.13': routeTableChangesFilter,\n            '3.14': vpcChangesFilter\n        },\n        '1.4.0': {\n            '4.3': rootAccountUsageFilter,\n            '4.4': iamPolicyChangesFilter,\n            '4.5': cloudtrailChangesFilter,\n            '4.6': consoleAuthenticationFailureFilter,\n            '4.7': disableOrDeleteCMKFilter,\n            '4.8': s3BucketPolicyChangesFilter,\n            '4.9': awsConfigChangesFilter,\n            '4.10': securityGroupChangesFilter,\n            '4.11': networkACLChangesFilter,\n            '4.12': networkGatewayChangesFilter,\n            '4.13': routeTableChangesFilter,\n            '4.14': vpcChangesFilter\n        }\n    },\n    'security-control': {\n        '2.0.0': {\n           \"CloudWatch.1\": rootAccountUsageFilter,\n           \"CloudWatch.2\": unauthorizedAPICallsFilter,\n           \"CloudWatch.3\": consoleSignInWithoutMFAFilter,\n           \"CloudWatch.4\": iamPolicyChangesFilter,\n           \"CloudWatch.5\": cloudtrailChangesFilter,\n           \"CloudWatch.6\": consoleAuthenticationFailureFilter,\n           \"CloudWatch.7\": disableOrDeleteCMKFilter,\n           \"CloudWatch.8\": s3BucketPolicyChangesFilter,\n           \"CloudWatch.9\": awsConfigChangesFilter,\n           \"CloudWatch.10\": securityGroupChangesFilter,\n           \"CloudWatch.11\": networkACLChangesFilter,\n           \"CloudWatch.12\": networkGatewayChangesFilter,\n           \"CloudWatch.13\": routeTableChangesFilter,\n           \"CloudWatch.14\": vpcChangesFilter\n        }\n    }\n}\n\ndef verify(event, _):\n    try:\n        standard_mapping = Cloudwatch_mappings.get(event['StandardLongName']).get(event['StandardVersion'])\n        return standard_mapping.get(event['ControlId'], None) \n    except KeyError as ex:\n        exit(f'ERROR: Could not find associated metric filter. Missing parameter: {str(ex)}')\n\n ",
        "InputPayload": {
         "ControlId": "{{ ParseInput.ControlId }}",
         "StandardLongName": "cis-aws-foundations-benchmark",
         "StandardVersion": "1.4.0"
        }
       },
       "outputs": [
        {
         "Name": "FilterName",
         "Selector": "$.Payload.filter_name",
         "Type": "String"
        },
        {
         "Name": "FilterPattern",
         "Selector": "$.Payload.filter_pattern",
         "Type": "String"
        },
        {
         "Name": "MetricName",
         "Selector": "$.Payload.metric_name",
         "Type": "String"
        },
        {
         "Name": "MetricValue",
         "Selector": "$.Payload.metric_value",
         "Type": "Integer"
        },
        {
         "Name": "AlarmName",
         "Selector": "$.Payload.alarm_name",
         "Type": "String"
        },
        {
         "Name": "AlarmDesc",
         "Selector": "$.Payload.alarm_desc",
         "Type": "String"
        },
        {
         "Name": "AlarmThreshold",
         "Selector": "$.Payload.alarm_threshold",
         "Type": "Integer"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-CreateLogMetricFilterAndAlarm",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "FilterName": "{{ GetMetricFilterAndAlarmInputValue.FilterName }}",
         "FilterPattern": "{{ GetMetricFilterAndAlarmInputValue.FilterPattern }}",
         "MetricName": "{{ GetMetricFilterAndAlarmInputValue.MetricName }}",
         "MetricValue": "{{ GetMetricFilterAndAlarmInputValue.MetricValue }}",
         "MetricNamespace": "{{ MetricNamespace }}",
         "AlarmName": "{{ GetMetricFilterAndAlarmInputValue.AlarmName }}",
         "AlarmDesc": "{{ GetMetricFilterAndAlarmInputValue.AlarmDesc }}",
         "AlarmThreshold": "{{ GetMetricFilterAndAlarmInputValue.AlarmThreshold }}",
         "LogGroupName": "{{ LogGroupName }}",
         "SNSTopicName": "DEV-SO0111-SHARR-LocalAlarmNotification",
         "KMSKeyArn": "{{ KMSKeyArn }}"
        }
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Added metric filter to the log group and notifications to SNS topic DEV-SO0111-ASR-LocalAlarmNotification.",
         "UpdatedBy": "ASR-CIS_1.4.0_4.1"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_4.1",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait3"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/4.1/Resource"
   },
   "Condition": "ControlRunbooksEnable41ConditionEE7F04D2"
  },
  "ControlRunbooks53D99D7F5E": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "### Document Name - ASR-AFSBP_1.0.0_EC2.2\n\n## What does this document do?\nThis document deletes ingress and egress rules from default security\ngroup using the AWS SSM Runbook AWSConfigRemediation-RemoveVPCDefaultSecurityGroupRules\n\n## Input Parameters\n* Finding: (Required) Security Hub finding details JSON\n* AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.\n\n## Output Parameters\n* Remediation.Output - Output from AWSConfigRemediation-RemoveVPCDefaultSecurityGroupRules SSM doc\n\n## Documentation Links\n* [AFSBP EC2.2](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-ec2-2)\n",
     "schemaVersion": "0.3",
     "parameters": {
      "Finding": {
       "type": "StringMap",
       "description": "The input from the Orchestrator Step function for the 5.3 finding"
      },
      "AutomationAssumeRole": {
       "type": "String",
       "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
       "allowedPattern": "^arn:(?:aws|aws-us-gov|aws-cn):iam::\\d{12}:role\\/[\\w+=,.@-]+$"
      },
      "RemediationRoleName": {
       "type": "String",
       "default": "SO0111-RemoveVPCDefaultSecurityGroupRules",
       "allowedPattern": "^[\\w+=,.@-]+$"
      }
     },
     "assumeRole": "{{ AutomationAssumeRole }}",
     "outputs": [
      "Remediation.Output",
      "ParseInput.AffectedObject"
     ],
     "mainSteps": [
      {
       "name": "ParseInput",
       "action": "aws:executeScript",
       "inputs": {
        "Handler": "parse_event",
        "Runtime": "python3.8",
        "Script": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport re\nimport json\nimport boto3\nfrom botocore.config import Config\n\ndef connect_to_config(boto_config):\n    return boto3.client('config', config=boto_config)\n\ndef connect_to_ssm(boto_config):\n    return boto3.client('ssm', config=boto_config)\n\ndef get_solution_id():\n    return 'SO0111'\n\ndef get_solution_version():\n    ssm = connect_to_ssm(\n        Config(\n            retries = {\n                'mode': 'standard'\n            },\n            user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'\n        )\n    )\n    solution_version = 'unknown'\n    try:\n        ssm_parm_value = ssm.get_parameter(\n            Name=f'/Solutions/{get_solution_id()}/member-version'\n        )['Parameter'].get('Value', 'unknown')\n        solution_version = ssm_parm_value\n    except Exception as e:\n        print(e)\n        print(f'ERROR getting solution version')\n    return solution_version\n\ndef get_shortname(long_name):\n    short_name = {\n        'aws-foundational-security-best-practices': 'AFSBP',\n        'cis-aws-foundations-benchmark': 'CIS',\n        'pci-dss': 'PCI',\n        'security-control': 'SC'\n    }\n    return short_name.get(long_name, None)\n\ndef get_config_rule(rule_name):\n    boto_config = Config(\n        retries = {\n            'mode': 'standard'\n        },\n        user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'\n    )\n    config_rule = None\n    try:\n        configsvc = connect_to_config(boto_config)\n        config_rule = configsvc.describe_config_rules(\n            ConfigRuleNames=[ rule_name ]\n        ).get('ConfigRules', [])[0]\n    except Exception as e:\n        print(e)\n        exit(f'ERROR getting config rule {rule_name}')\n    return config_rule\n\nclass FindingEvent:\n    \"\"\"\n    Finding object returns the parse fields from an input finding json object\n    \"\"\"\n    def _get_resource_id(self, parse_id_pattern, resource_index):\n        identifier_raw = self.finding_json['Resources'][0]['Id']\n        self.resource_id = identifier_raw\n        self.resource_id_matches = []\n\n        if parse_id_pattern:\n            identifier_match = re.match(\n                parse_id_pattern,\n                identifier_raw\n            )\n\n            if identifier_match:\n                for group in range(1, len(identifier_match.groups())+1):\n                    self.resource_id_matches.append(identifier_match.group(group))\n                self.resource_id = identifier_match.group(resource_index)\n            else:\n                exit(f'ERROR: Invalid resource Id {identifier_raw}')\n    \n    def _get_sc_check(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname('security-control')\n            self.control_id = match_finding_id.group(1)\n\n        return match_finding_id\n\n    def _get_standard_info(self):\n        match_finding_id = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:'+\n            'subscription/(.*?)/v/(\\d+\\.\\d+\\.\\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',\n            self.finding_json['Id']\n        )\n        if match_finding_id:\n            self.standard_id = get_shortname(match_finding_id.group(1))\n            self.standard_version = match_finding_id.group(2)\n            self.control_id = match_finding_id.group(3)\n        else:\n            match_sc_finding_id = self._get_sc_check()\n            if not match_sc_finding_id:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]}'\n\n    def _get_aws_config_rule(self):\n        # config_rule_id refers to the AWS Config Rule that produced the finding\n        if \"RelatedAWSResources:0/type\" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':\n            self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']\n            self.aws_config_rule = get_config_rule(self.aws_config_rule_id)\n\n    def _get_region_from_resource_id(self):\n        check_for_region = re.match(\n            r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\\d):.*:.*$',\n            self.finding_json['Resources'][0]['Id']\n        )\n        if check_for_region:\n            self.resource_region = check_for_region.group(1)\n\n    def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):\n        self.valid_finding = True\n        self.resource_region = None\n        self.control_id = None\n        self.aws_config_rule_id = None\n        self.aws_config_rule = {}\n\n        \"\"\"Populate fields\"\"\"\n        # v1.5\n        self.finding_json = finding_json\n        self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches\n        self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id\n\n        # V1.4\n        self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId\n        if not re.match(r'^\\d{12}$', self.account_id) and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'\n        self.finding_id = self.finding_json.get('Id', None)              # deprecate\n        self.product_arn = self.finding_json.get('ProductArn', None)\n        if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\\d::product/aws/securityhub$', self.product_arn):\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'\n        self.details = self.finding_json['Resources'][0].get('Details', {})\n        # Test mode is used with fabricated finding data to tell the\n        # remediation runbook to run in test more (where supported)\n        # Currently not widely-used and perhaps should be deprecated.\n        self.testmode = bool('testmode' in self.finding_json)\n        self.resource = self.finding_json['Resources'][0]\n        self._get_region_from_resource_id()\n        self._get_aws_config_rule()\n        self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}\n\n        # Validate control_id\n        if not self.control_id:\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json[\"Id\"]} - missing Control Id'\n        elif self.control_id not in expected_control_id:  # ControlId is the expected value\n            if self.valid_finding:\n                self.valid_finding = False\n                self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'\n\n        if not self.resource_id and self.valid_finding:\n            self.valid_finding = False\n            self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'\n\n        if not self.valid_finding:\n            # Error message and return error data\n            msg = f'ERROR: {self.invalid_finding_reason}'\n            exit(msg)\n\n    def __str__(self):\n        return json.dumps(self.__dict__)\n\n'''\nMAIN\n'''\ndef parse_event(event, _):\n    finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))\n\n    if not finding_event.valid_finding:\n        exit('ERROR: Finding is not valid')\n\n    return {\n        \"account_id\": finding_event.account_id,\n        \"resource_id\": finding_event.resource_id,\n        \"finding_id\": finding_event.finding_id,         # Deprecate v1.5.0+\n        \"control_id\": finding_event.control_id,\n        \"product_arn\": finding_event.product_arn,       # Deprecate v1.5.0+\n        \"object\": finding_event.affected_object,\n        \"matches\": finding_event.resource_id_matches,\n        \"details\": finding_event.details,               # Deprecate v1.5.0+\n        \"testmode\": finding_event.testmode,             # Deprecate v1.5.0+\n        \"resource\": finding_event.resource,\n        \"resource_region\": finding_event.resource_region,\n        \"finding\": finding_event.finding_json,\n        \"aws_config_rule\": finding_event.aws_config_rule\n    }\n",
        "InputPayload": {
         "Finding": "{{ Finding }}",
         "parse_id_pattern": "^arn:(?:aws|aws-cn|aws-us-gov):ec2:(?:[a-z]{2}(?:-gov)?-[a-z]+-\\d):\\d{12}:security-group\\/(sg-[0-9a-f]*)$",
         "expected_control_id": [
          "5.3"
         ]
        }
       },
       "outputs": [
        {
         "Name": "FindingId",
         "Selector": "$.Payload.finding_id",
         "Type": "String"
        },
        {
         "Name": "ProductArn",
         "Selector": "$.Payload.product_arn",
         "Type": "String"
        },
        {
         "Name": "AffectedObject",
         "Selector": "$.Payload.object",
         "Type": "StringMap"
        },
        {
         "Name": "GroupId",
         "Selector": "$.Payload.resource_id",
         "Type": "String"
        },
        {
         "Name": "RemediationAccount",
         "Selector": "$.Payload.account_id",
         "Type": "String"
        },
        {
         "Name": "RemediationRegion",
         "Selector": "$.Payload.resource_region",
         "Type": "String"
        }
       ]
      },
      {
       "name": "Remediation",
       "action": "aws:executeAutomation",
       "inputs": {
        "DocumentName": "ASR-RemoveVPCDefaultSecurityGroupRules",
        "RuntimeParameters": {
         "AutomationAssumeRole": "arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID }}:role/{{ RemediationRoleName }}",
         "GroupId": "{{ ParseInput.GroupId }}"
        },
        "TargetLocations": [
         {
          "Accounts": [
           "{{ ParseInput.RemediationAccount }}"
          ],
          "Regions": [
           "{{ ParseInput.RemediationRegion }}"
          ],
          "ExecutionRoleName": "{{ RemediationRoleName }}"
         }
        ]
       }
      },
      {
       "name": "UpdateFinding",
       "action": "aws:executeAwsApi",
       "inputs": {
        "Service": "securityhub",
        "Api": "BatchUpdateFindings",
        "FindingIdentifiers": [
         {
          "Id": "{{ ParseInput.FindingId }}",
          "ProductArn": "{{ ParseInput.ProductArn }}"
         }
        ],
        "Note": {
         "Text": "Removed rules on default security group",
         "UpdatedBy": "ASR-CIS_1.4.0_5.3"
        },
        "Workflow": {
         "Status": "RESOLVED"
        }
       },
       "isEnd": true
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Name": "ASR-CIS_1.4.0_5.3",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ],
    "UpdateMethod": "NewVersion"
   },
   "DependsOn": [
    "CreateWait3"
   ],
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/ControlRunbooks/5.3/Resource"
   },
   "Condition": "ControlRunbooksEnable53Condition75037F5D"
  },
  "CreateWait0": {
   "Type": "Custom::Wait",
   "Properties": {
    "ServiceToken": {
     "Ref": "WaitProviderServiceToken"
    },
    "CreateIntervalSeconds": 1,
    "UpdateIntervalSeconds": 1,
    "DeleteIntervalSeconds": 0,
    "DocumentPropertiesHash": "df131591fe368ec39c83916601b5c70729f80430db899867e6cc97275a3c58fc"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/CreateWait0/Default"
   }
  },
  "DeletWait0": {
   "Type": "Custom::Wait",
   "Properties": {
    "ServiceToken": {
     "Ref": "WaitProviderServiceToken"
    },
    "CreateIntervalSeconds": 0,
    "UpdateIntervalSeconds": 0,
    "DeleteIntervalSeconds": 0.5,
    "DocumentPropertiesHash": "df131591fe368ec39c83916601b5c70729f80430db899867e6cc97275a3c58fc"
   },
   "DependsOn": [
    "ControlRunbooks112E799FE52",
    "ControlRunbooks11463D81FF3",
    "ControlRunbooks117A6C528D4",
    "ControlRunbooks18982107CE",
    "ControlRunbooks211791EFE09"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/DeletWait0/Default"
   }
  },
  "CreateWait1": {
   "Type": "Custom::Wait",
   "Properties": {
    "ServiceToken": {
     "Ref": "WaitProviderServiceToken"
    },
    "CreateIntervalSeconds": 1,
    "UpdateIntervalSeconds": 1,
    "DeleteIntervalSeconds": 0,
    "DocumentPropertiesHash": "ef259ff40c741b06060e020cb68e00ca0aee4fd7aa3006afc4b5068b075fb213"
   },
   "DependsOn": [
    "CreateWait0"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/CreateWait1/Default"
   }
  },
  "DeletWait1": {
   "Type": "Custom::Wait",
   "Properties": {
    "ServiceToken": {
     "Ref": "WaitProviderServiceToken"
    },
    "CreateIntervalSeconds": 0,
    "UpdateIntervalSeconds": 0,
    "DeleteIntervalSeconds": 0.5,
    "DocumentPropertiesHash": "ef259ff40c741b06060e020cb68e00ca0aee4fd7aa3006afc4b5068b075fb213"
   },
   "DependsOn": [
    "ControlRunbooks21282C7C72B",
    "ControlRunbooks2151BEA4F4FA",
    "ControlRunbooks21527B562EDD",
    "ControlRunbooks221536A739E",
    "ControlRunbooks31E1EB4148",
    "DeletWait0"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/DeletWait1/Default"
   }
  },
  "CreateWait2": {
   "Type": "Custom::Wait",
   "Properties": {
    "ServiceToken": {
     "Ref": "WaitProviderServiceToken"
    },
    "CreateIntervalSeconds": 1,
    "UpdateIntervalSeconds": 1,
    "DeleteIntervalSeconds": 0,
    "DocumentPropertiesHash": "4694e7ef18acef00a3e2295dc42886215a85afadb7ac6290005ddbffa20050f2"
   },
   "DependsOn": [
    "CreateWait1"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/CreateWait2/Default"
   }
  },
  "DeletWait2": {
   "Type": "Custom::Wait",
   "Properties": {
    "ServiceToken": {
     "Ref": "WaitProviderServiceToken"
    },
    "CreateIntervalSeconds": 0,
    "UpdateIntervalSeconds": 0,
    "DeleteIntervalSeconds": 0.5,
    "DocumentPropertiesHash": "4694e7ef18acef00a3e2295dc42886215a85afadb7ac6290005ddbffa20050f2"
   },
   "DependsOn": [
    "ControlRunbooks327C23FA17",
    "ControlRunbooks3344D51B18",
    "ControlRunbooks34EAC45CB8",
    "ControlRunbooks35A7FCA9DB",
    "ControlRunbooks36E5400050",
    "DeletWait1"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/DeletWait2/Default"
   }
  },
  "CreateWait3": {
   "Type": "Custom::Wait",
   "Properties": {
    "ServiceToken": {
     "Ref": "WaitProviderServiceToken"
    },
    "CreateIntervalSeconds": 1,
    "UpdateIntervalSeconds": 1,
    "DeleteIntervalSeconds": 0,
    "DocumentPropertiesHash": "f5f9573d484c43a0e13d1998d16d0f063662d8a3d444084b3d6a23074f303fee"
   },
   "DependsOn": [
    "CreateWait2"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/CreateWait3/Default"
   }
  },
  "DeletWait3": {
   "Type": "Custom::Wait",
   "Properties": {
    "ServiceToken": {
     "Ref": "WaitProviderServiceToken"
    },
    "CreateIntervalSeconds": 0,
    "UpdateIntervalSeconds": 0,
    "DeleteIntervalSeconds": 0.5,
    "DocumentPropertiesHash": "f5f9573d484c43a0e13d1998d16d0f063662d8a3d444084b3d6a23074f303fee"
   },
   "DependsOn": [
    "ControlRunbooks37445C7EAF",
    "ControlRunbooks38380D9165",
    "ControlRunbooks39580F3C91",
    "ControlRunbooks41F5F0CF7C",
    "ControlRunbooks53D99D7F5E",
    "DeletWait2"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CIS140MemberStack/DeletWait3/Default"
   }
  }
 },
 "Conditions": {
  "ControlRunbooksEnable18ConditionF6303E01": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable181C318FC3"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable112ConditionBA5990A5": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable112D0A85A4C"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable114Condition7F10591B": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable11420700A06"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable117Condition9084BE5D": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable1176CD5F1DF"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable211ConditionB51DDAA2": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable2114BB0FE33"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable212ConditionE41EF736": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable212AC2A9740"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable2151ConditionF22F5254": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable2151F6938FCB"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable2152Condition0CC57650": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable215295B0C61F"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable221Condition321911A4": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable221A45AA374"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable31ConditionCE8DA4BE": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable31414C52D4"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable32Condition07D68F4A": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable3263E6D183"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable33Condition00E8BEE4": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable3345664E05"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable34Condition951268F5": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable34E4CE22B2"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable35ConditionE60C238E": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable35E545303E"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable36Condition6354E2A2": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable365DE45372"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable37ConditionD24493F4": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable37C20680E9"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable38Condition9332FA29": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable38CFC29150"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable39ConditionA07D23FA": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable39896E35D8"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable41ConditionEE7F04D2": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable41660E9092"
    },
    "Available"
   ]
  },
  "ControlRunbooksEnable53Condition75037F5D": {
   "Fn::Equals": [
    {
     "Ref": "ControlRunbooksEnable53E6CB545D"
    },
    "Available"
   ]
  }
 }
}